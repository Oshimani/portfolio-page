import { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useState, useEffect } from "react";
import { twMerge } from "tailwind-merge";
import Aside, { AsideFooter, AsideHeader } from "./components/Aside";

let interval: NodeJS.Timeout | null = null

const FancyForm: NextPage = () => {

    const stylesTransparentContainer = ["w-64"]
    const stylesAvatarIcon = ["mx-auto"]
    const stylesContainer = ["bg-slate-100", "text-center", "pt-4", "pb-8", "px-4", "rounded-lg", "border-solid border-[#fccc4c] border-t-[64px]", "-mt-16"]
    const stylesNametext = ["text-2xl"]
    const stylesMailtext = ["mt-12"]

    const [styleIndices, setStyleIndices] = useState({
        transparentContainer: 0,
        avatarIcon: 0,
        container: 0,
        nametext: 0,
        mailtext: 0
    })

    const [replayAvailable, setReplayAvailable] = useState(false)

    const start = () => {
        if (interval) return
        if (replayAvailable) {
            setStyleIndices({
                transparentContainer: 0,
                avatarIcon: 0,
                container: 0,
                nametext: 0,
                mailtext: 0
            })
            setReplayAvailable(false)
        }
        interval = setInterval(() => {
            updateStyles()
        }, 1000)
    }
    const updateStyles = () => {
        setStyleIndices(prev => ({
            transparentContainer: prev.transparentContainer <= stylesTransparentContainer.length ? prev.transparentContainer + 1 : prev.transparentContainer,
            avatarIcon: prev.avatarIcon <= stylesAvatarIcon.length
                && prev.transparentContainer >= stylesTransparentContainer.length ? prev.avatarIcon + 1 : prev.avatarIcon,
            container: prev.container <= stylesContainer.length
                && prev.transparentContainer >= stylesTransparentContainer.length
                && prev.avatarIcon >= stylesAvatarIcon.length ? prev.container + 1 : prev.container,
            nametext: prev.nametext <= stylesNametext.length
                && prev.transparentContainer >= stylesTransparentContainer.length
                && prev.avatarIcon >= stylesAvatarIcon.length
                && prev.container >= stylesContainer.length ? prev.nametext + 1 : prev.nametext,
            mailtext: prev.mailtext <= stylesMailtext.length
                && prev.transparentContainer >= stylesTransparentContainer.length
                && prev.avatarIcon >= stylesAvatarIcon.length
                && prev.container >= stylesContainer.length
                && prev.nametext >= stylesNametext.length ? prev.mailtext + 1 : prev.mailtext,
        }))
    }

    useEffect(() => {
        console.log("tick")
        if (styleIndices.mailtext >= stylesMailtext.length) {
            clearInterval(interval!)
            setReplayAvailable(true)
            interval = null
        }
    }, [styleIndices])

    return (
        <>
            <Head>
                <title>Jannick Jungbluth</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <article className="grid grid-cols-3 ">
                <figure className="col-span-2 tw-startpage-clone-figure">

                    <div className="grid justify-center items-center">

                        {/* TRANSPARENT CONTAINER */}
                        <div className={twMerge(["w-36", ...stylesTransparentContainer.slice(0, styleIndices.transparentContainer)])}>
                            {/* AVATAR ICON */}
                            <Image className={twMerge(["mx-0", ...stylesAvatarIcon.slice(0, styleIndices.avatarIcon)])} src="/img/avatar.svg" alt="Avatar" width={140} height={140} />

                            <div className={twMerge(["rounded-none", ...stylesContainer.slice(0, styleIndices.container)])}>
                                <p className={stylesNametext.slice(0, styleIndices.nametext).join(" ")}>Firstname</p>
                                <p className={stylesNametext.slice(0, styleIndices.nametext).join(" ")}>Lastname</p>
                                <p className={stylesMailtext.slice(0, styleIndices.mailtext).join(" ")}>address@mail.com</p>
                                <p>06504/16202</p>
                            </div>
                        </div>
                    </div>

                    <pre className="rounded-lg bg-black bg-opacity-50 backdrop-blur-sm text-[#fccc4c] overflow-x-auto p-4 m-8 rounded">
                        {
                            `<div className="${stylesTransparentContainer.slice(0, styleIndices.transparentContainer).join(" ")}">\n` +
                            `  <Image className="${stylesAvatarIcon.slice(0, styleIndices.avatarIcon).join(" ")}" src="/img/avatar.svg" width={140} height={140} />\n` +
                            `  <div className="${stylesContainer.slice(0, styleIndices.container).join(" ")}">\n` +
                            `    <p className="${stylesNametext.slice(0, styleIndices.nametext).join(" ")}" Firstname</p>\n` +
                            `    <p className="${stylesNametext.slice(0, styleIndices.nametext).join(" ")}" Lastname</p>\n` +
                            `    <p className="${stylesMailtext.slice(0, styleIndices.mailtext).join(" ")}" address@mail.com</p>\n` +
                            `    <p>06504/16202</p>\n` +
                            `  </div>\n` +
                            `</div>`
                        }
                    </pre>

                </figure>

                {/* TEXT RIGHT COLUMN */}
                <Aside className="col-span-1">
                    <AsideHeader>Tailwind Startpage Clone</AsideHeader>
                    <p>This is a clone of the animated image from the tailwind startpage.</p>
                    <Image className="my-4" src="/img/user-avatar.png" width={353} height={479} alt="Mockup of the final avatar" />
                    <button onClick={() => start()}>{replayAvailable ? "Replay Animation" : "Start Animation"}</button>
                    <AsideFooter>The code can be found in this repository.</AsideFooter>
                </Aside>
            </article>
        </>
    );
};

export default FancyForm;